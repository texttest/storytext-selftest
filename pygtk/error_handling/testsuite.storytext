# Give a non-existent file for replay
replay_bad_file

# Give a non-existent directory for record
record_bad_file

# Check we ignore nonsense in the usecase file
bad_command

# See what happens if the python version is too old
bad_python_version

# Check what happens if there isn't a usecase and the target program isn't a UI
no_usecase

# Fail gracefully if parsing the UI map file fails
bad_ui_map_file

# Handle duplicate entries for the same widget
# 
ui_map_duplicate_entries

# The menubar has a check menu item which makes the buttons invisible.
# This test demonstrates the PyUseCase 'bug'/feature that invisible 
# buttons can be pressed via usecase scripts. (the buttons are hidden,
# but the usecase script still simulates the 'add movie' event that is
# triggered by the 'Add' button) This shouldn't be a problem for normal 
# usage, but can make it possible to create scripts which end up in a 
# weird state.
use_hidden

# Same as above, buttons are disabled (not sensitive), but still visible
use_insensitive

# Same as above, but using a menu item in a non-visible submenu. This 
# is not quite the same thing, and should probably be possible, since
# the menu item is considered visible and sensitive even when it is not
# currently 'rolled out'
use_hidden_menu

# Check what happens if the tab we want isn't there
bad_notebook_tab

# Check we can handle a combobox with no contents
combobox_empty

# Check we can handle a combobox with no model attached
combobox_no_model

# The user can call set_image on anything at all. Don't bail out if we get an unexpected type there.
unexpected_image

# Error handling for tree view stuff
tree_views

# Errors for file choosers
file_choosers
